name: Test building on all platforms

on:
  push:
  workflow_dispatch:

env:
  PROJECT_NAME: Imogen
  BUILD_TYPE: Release
  BUILD_DIR: Builds

#

jobs:

  build:

    name: ${{ matrix.artifact }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, windows-2016, ubuntu-latest, ubuntu-20.04, macos-latest]
        include:
        - os: windows-latest
          artifact: Windows
        - os: windows-2016
          artifact: Windows
        - os: ubuntu-latest
          artifact: Linux
        - os: ubuntu-20.04
          artifact: Linux
        - os: macos-latest
          artifact: MacOS
    timeout-minutes: 30

    steps:

    - name: Install JUCE's Linux Deps and select g++ 9
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update && sudo apt install libasound2-dev libcurl4-openssl-dev libx11-dev libxinerama-dev libxext-dev libfreetype6-dev libwebkit2gtk-4.0-dev libglu1-mesa-dev
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 9
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 9

    - name: Get latest CMake
      uses: lukka/get-cmake@latest

    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: true

    - name: Configure
      shell: bash
      run: cmake -B ${{ env.BUILD_DIR }} --config ${{ env.BUILD_TYPE }} -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE}} -DImogen_unitTesting=FALSE -Dbv_alwaysForceCacheInits=TRUE .

    - name: Build
      shell: bash
      run: cmake --build ${{ env.BUILD_DIR }} --config ${{ env.BUILD_TYPE }}

    - name: Zip
      working-directory: ${{ env.BUILD_DIR }}
      run: cmake -E tar cfv ${{ env.PROJECT_NAME }}-${{ matrix.artifact }}.zip --format=zip ${{ env.PROJECT_NAME }}_artefacts

    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        path: ${{ env.BUILD_DIR }}/${{ env.PROJECT_NAME }}-${{ matrix.artifact }}.zip
        name: ${{ env.PROJECT_NAME }}-${{ matrix.artifact }}
#

  release:
  
    runs-on: ubuntu-latest
    needs: build
    outputs: 
        upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: true
        prerelease: true

    - name: Download all artifacts
      uses: actions/download-artifact@v2
  
    - name: Upload Windows Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ env.PROJECT_NAME }}-Windows.zip
        asset_name: ${{ env.PROJECT_NAME }}-Windows.zip
        asset_content_type: application/zip

    - name: Upload Linux Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ env.PROJECT_NAME }}-Linux.zip
        asset_name: ${{ env.PROJECT_NAME }}-Linux.zip
        asset_content_type: application/zip

    - name: Upload MacOS Asset
      uses: actions/upload-release-asset@v1
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ env.PROJECT_NAME }}-MacOS.zip
        asset_name: ${{ env.PROJECT_NAME }}-MacOS.zip
        asset_content_type: application/zip

