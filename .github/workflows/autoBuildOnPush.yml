name: Test building on all platforms

on:
  push:
  workflow_dispatch:

env:
  PROJECT_NAME: Imogen
  BUILD_TYPE: Release
  BUILD_DIR: Builds
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#

jobs:

  build:

    if: "!contains(github.event.head_commit.message, 'SKIP-CI')"

    name: ${{ matrix.artifact }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-20.04, macos-latest]
        include:
        - os: windows-latest
          artifact: Windows
        - os: ubuntu-20.04
          artifact: Linux
        - os: macos-latest
          artifact: MacOS

    steps:

    - name: Install JUCE's Linux Deps and select g++ 9
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update && sudo apt install libasound2-dev libcurl4-openssl-dev libx11-dev libxinerama-dev libxext-dev libfreetype6-dev libwebkit2gtk-4.0-dev libglu1-mesa-dev
        sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 9
        sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 9

    - name: Initialize CodeQL
      if: runner.os == 'Linux' && "!contains(github.event.head_commit.message, 'SCAN')"
      uses: github/codeql-action/init@v1
      with:
        languages: cpp

    - name: Get latest CMake
      uses: lukka/get-cmake@latest

    - name: Checkout code
      uses: actions/checkout@v2
      with:
        submodules: true

    - name: Configure
      shell: bash
      run: cmake -B ${{ env.BUILD_DIR }} --config ${{ env.BUILD_TYPE }} -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE}} -DImogen_unitTesting=FALSE -Dbv_alwaysForceCacheInits=TRUE .

    - name: Build
      shell: bash
      run: cmake --build ${{ env.BUILD_DIR }} --config ${{ env.BUILD_TYPE }}

    - name: CodeQL analysis
      if: runner.os == 'Linux' && "!contains(github.event.head_commit.message, 'SCAN')"
      uses: github/codeql-action/analyze@v1

    - name: Zip
      working-directory: ${{ env.BUILD_DIR }}
      run: cmake -E tar cfv ${{ env.PROJECT_NAME }}-${{ matrix.artifact }}.zip --format=zip ${{ env.PROJECT_NAME }}_artefacts

    - name: Upload Artifact
      uses: actions/upload-artifact@v2
      with:
        path: ${{ env.BUILD_DIR }}/${{ env.PROJECT_NAME }}-${{ matrix.artifact }}.zip
        name: ${{ env.PROJECT_NAME }}-${{ matrix.artifact }}.zip
#

  upload-to-drive:

    needs: build
    runs-on: ubuntu-latest

    steps:

      - name: install Google Drive scripts
        shell: bash
        run: curl --compressed -Ls https://github.com/labbots/google-drive-upload/raw/master/install.sh | sh -s

      - name: Download all artifacts
        uses: actions/download-artifact@v2

      - name: upload to Drive
        shell: bash
        run: |
          gupload Imogen-Windows.zip

#
