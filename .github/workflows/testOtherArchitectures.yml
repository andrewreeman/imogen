name: Test-other-architectures

on: 
  push:
  workflow_dispatch:
  
env:
  PROJECT_NAME: Imogen
  BUILD_TYPE: Release
  BUILD_DIR: Builds

jobs:

  build:
  
    runs-on: ubuntu-18.04  # The host should always be linux
    name: Build on ${{ matrix.distro }} ${{ matrix.arch }}
    
    strategy:   # Run steps on a matrix of 3 arch/distro combinations
      fail-fast: false
      matrix:
        include:
          - arch: aarch64
            distro: ubuntu18.04
          - arch: ppc64le
            distro: alpine_latest
          - arch: s390x
            distro: fedora_latest

    steps:
    
      - uses: lukka/get-cmake@latest 
      
      - uses: actions/checkout@v2.1.0
        with:
          submodules: true
      
      - uses: uraimo/run-on-arch-action@v2.0.5
      
        name: Configure & build
        id: build
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}

          # Not required, but speeds up builds
          # githubToken: ${{ github.token }}

          # Create an artifacts directory
          setup: |
            mkdir -p "${PWD}/artifacts"
            sudo apt-get update && sudo apt install libasound2-dev libcurl4-openssl-dev libx11-dev libxinerama-dev libxext-dev libfreetype6-dev libwebkit2gtk-4.0-dev libglu1-mesa-dev
            sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-9 9
            sudo update-alternatives --install /usr/bin/g++ g++ /usr/bin/g++-9 9

          # Mount the artifacts directory as /artifacts in the container
          dockerRunArgs: |
            --volume "${PWD}/artifacts:/artifacts"

          # Pass some environment variables to the container
          env: | 
            artifact_name: git-${{ matrix.distro }}_${{ matrix.arch }}

          shell: bash

          # Install some dependencies in the container. This speeds up builds if
          # you are also using githubToken. Any dependencies installed here will
          # be part of the container image that gets cached, so subsequent
          # builds don't have to re-install them. The image layer is cached
          # publicly in your project's package repository, so it is vital that
          # no secrets are present in the container state or logs.
          install: |
            case "${{ matrix.distro }}" in
              ubuntu*|jessie|stretch|buster)
                apt-get update -q -y
                apt-get install -q -y git
                ;;
              fedora*)
                dnf -y update
                dnf -y install git which
                ;;
              alpine*)
                apk update
                apk add git
                ;;
            esac
            
          run: |
            cmake -B ${{ env.BUILD_DIR }} --config ${{ env.BUILD_TYPE }} -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE}} -DImogen_unitTesting=FALSE -Dbv_alwaysForceCacheInits=TRUE .
            cmake --build ${{ env.BUILD_DIR }} --config ${{ env.BUILD_TYPE }}
            cmake -E tar cfv ${{ env.PROJECT_NAME }}-${{ matrix.artifact }}.zip --format=zip ${{ env.PROJECT_NAME }}_artefacts
        
      - uses: actions/upload-artifact@v2
        with:
          path: ${PWD}/artifacts/${{ env.PROJECT_NAME }}-${{ matrix.artifact }}.zip
          name: ${{ env.PROJECT_NAME }}-${{ matrix.artifact }}
